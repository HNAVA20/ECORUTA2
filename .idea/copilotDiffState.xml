<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/assets/centros.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/assets/centros.json" />
              <option name="originalContent" value="[&#10;  {&#10;    &quot;nombre&quot;: &quot;Centro Tepic Norte&quot;,&#10;    &quot;lat&quot;: 21.5145,&#10;    &quot;lng&quot;: -104.8942,&#10;    &quot;materiales&quot;: &quot;Plástico, Cartón, Electrónicos&quot;&#10;  },&#10;  {&#10;    &quot;nombre&quot;: &quot;Punto Xalisco Centro&quot;,&#10;    &quot;lat&quot;: 21.4725,&#10;    &quot;lng&quot;: -104.8978,&#10;    &quot;materiales&quot;: &quot;Vidrio, Pilas, Metales&quot;&#10;  },&#10;  {&#10;    &quot;nombre&quot;: &quot;Eco Punto Las Flores&quot;,&#10;    &quot;lat&quot;: 21.4982,&#10;    &quot;lng&quot;: -104.8789,&#10;    &quot;materiales&quot;: &quot;Papel, Aceite usado&quot;&#10;  }&#10;]" />
              <option name="updatedContent" value="[&#10;  {&#10;    &quot;nombre&quot;: &quot;Centro Tepic Norte&quot;,&#10;    &quot;lat&quot;: 21.5145,&#10;    &quot;lng&quot;: -104.8942,&#10;    &quot;materiales&quot;: &quot;Plástico, Cartón, Electrónicos&quot;&#10;  },&#10;  {&#10;    &quot;nombre&quot;: &quot;Punto Xalisco Centro&quot;,&#10;    &quot;lat&quot;: 21.4725,&#10;    &quot;lng&quot;: -104.8978,&#10;    &quot;materiales&quot;: &quot;Vidrio, Pilas, Metales&quot;&#10;  },&#10;  {&#10;    &quot;nombre&quot;: &quot;Eco Punto Las Flores&quot;,&#10;    &quot;lat&quot;: 21.4982,&#10;    &quot;lng&quot;: -104.8789,&#10;    &quot;materiales&quot;: &quot;Papel, Aceite usado&quot;&#10;  },&#10;  {&#10;    &quot;nombre&quot;: &quot;Centro Santiago Sur&quot;,&#10;    &quot;lat&quot;: -33.4569,&#10;    &quot;lng&quot;: -70.6483,&#10;    &quot;materiales&quot;: &quot;Plástico, Papel, Metales&quot;&#10;  }&#10;]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/ecorutaapp/CentrosReciclajeActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/ecorutaapp/CentrosReciclajeActivity.kt" />
              <option name="originalContent" value="package com.example.ecorutaapp&#10;&#10;import android.Manifest&#10;import android.content.pm.PackageManager&#10;import android.os.Bundle&#10;import android.widget.EditText&#10;import android.widget.TextView&#10;import androidx.core.app.ActivityCompat&#10;import androidx.core.widget.addTextChangedListener&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import androidx.appcompat.app.AppCompatActivity&#10;import com.example.ecorutaapp.model.CentroReciclaje&#10;import com.example.ecorutaapp.utils.LocationSender&#10;import com.google.android.gms.maps.CameraUpdateFactory&#10;import com.google.android.gms.maps.GoogleMap&#10;import com.google.android.gms.maps.OnMapReadyCallback&#10;import com.google.android.gms.maps.SupportMapFragment&#10;import com.google.android.gms.maps.model.LatLng&#10;import com.google.android.gms.maps.model.MarkerOptions&#10;import org.json.JSONArray&#10;&#10;class CentrosReciclajeActivity : AppCompatActivity(), OnMapReadyCallback {&#10;    private lateinit var map: GoogleMap&#10;    private lateinit var centros: List&lt;CentroReciclaje&gt;&#10;    private lateinit var adapter: CentroAdapter&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_centros_reciclaje)&#10;&#10;        val mapFragment = supportFragmentManager.findFragmentById(R.id.mapFragment) as SupportMapFragment&#10;        mapFragment.getMapAsync(this)&#10;&#10;        val recyclerView = findViewById&lt;RecyclerView&gt;(R.id.centrosRecyclerView)&#10;        val buscador = findViewById&lt;EditText&gt;(R.id.buscadorEditText)&#10;&#10;        centros = cargarCentrosDesdeJson()&#10;        adapter = CentroAdapter(centros) { centro -&gt;&#10;            moverMapaACentro(centro)&#10;            LocationSender.enviarDestinoAlReloj(this, centro.lat, centro.lng, centro.nombre)&#10;            android.widget.Toast.makeText(this, &quot;Destino enviado: ${centro.nombre}&quot;, android.widget.Toast.LENGTH_SHORT).show()&#10;        }&#10;&#10;        recyclerView.layoutManager = LinearLayoutManager(this)&#10;        recyclerView.adapter = adapter&#10;&#10;        buscador.addTextChangedListener {&#10;            val filtro = it.toString().trim().lowercase()&#10;            val filtrados = centros.filter { c -&gt; c.materiales.lowercase().contains(filtro) }&#10;            adapter.actualizarLista(filtrados)&#10;        }&#10;    }&#10;&#10;    override fun onMapReady(googleMap: GoogleMap) {&#10;        map = googleMap&#10;&#10;        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {&#10;            ActivityCompat.requestPermissions(this, arrayOf(Manifest.permission.ACCESS_FINE_LOCATION), 1)&#10;            return&#10;        }&#10;&#10;        map.isMyLocationEnabled = true&#10;        val tepic = LatLng(21.5058, -104.8940)&#10;        map.moveCamera(CameraUpdateFactory.newLatLngZoom(tepic, 13f))&#10;&#10;        for (centro in centros) {&#10;            val posicion = LatLng(centro.lat, centro.lng)&#10;            map.addMarker(MarkerOptions().position(posicion).title(centro.nombre))&#10;        }&#10;    }&#10;&#10;    private fun moverMapaACentro(centro: CentroReciclaje) {&#10;        val posicion = LatLng(centro.lat, centro.lng)&#10;        map.animateCamera(CameraUpdateFactory.newLatLngZoom(posicion, 15f))&#10;    }&#10;&#10;    private fun cargarCentrosDesdeJson(): List&lt;CentroReciclaje&gt; {&#10;        val jsonString = assets.open(&quot;centros.json&quot;).bufferedReader().use { it.readText() }&#10;        val jsonArray = JSONArray(jsonString)&#10;        val centros = mutableListOf&lt;CentroReciclaje&gt;()&#10;        for (i in 0 until jsonArray.length()) {&#10;            val obj = jsonArray.getJSONObject(i)&#10;            centros.add(&#10;                CentroReciclaje(&#10;                    obj.getString(&quot;nombre&quot;),&#10;                    obj.getDouble(&quot;lat&quot;),&#10;                    obj.getDouble(&quot;lng&quot;),&#10;                    obj.getString(&quot;materiales&quot;)&#10;                )&#10;            )&#10;        }&#10;        return centros&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.ecorutaapp&#10;&#10;import android.Manifest&#10;import android.content.pm.PackageManager&#10;import android.os.Bundle&#10;import android.widget.EditText&#10;import android.widget.TextView&#10;import androidx.core.app.ActivityCompat&#10;import androidx.core.widget.addTextChangedListener&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import androidx.appcompat.app.AppCompatActivity&#10;import com.example.ecorutaapp.model.CentroReciclaje&#10;import com.example.ecorutaapp.utils.LocationSender&#10;import com.google.android.gms.maps.CameraUpdateFactory&#10;import com.google.android.gms.maps.GoogleMap&#10;import com.google.android.gms.maps.OnMapReadyCallback&#10;import com.google.android.gms.maps.SupportMapFragment&#10;import com.google.android.gms.maps.model.LatLng&#10;import com.google.android.gms.maps.model.MarkerOptions&#10;import org.json.JSONArray&#10;&#10;class CentrosReciclajeActivity : AppCompatActivity(), OnMapReadyCallback {&#10;    private lateinit var map: GoogleMap&#10;    private lateinit var centros: List&lt;CentroReciclaje&gt;&#10;    private lateinit var adapter: CentroAdapter&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_centros_reciclaje)&#10;&#10;        val mapFragment = supportFragmentManager.findFragmentById(R.id.mapFragment) as SupportMapFragment&#10;        mapFragment.getMapAsync(this)&#10;&#10;        val recyclerView = findViewById&lt;RecyclerView&gt;(R.id.centrosRecyclerView)&#10;        val buscador = findViewById&lt;EditText&gt;(R.id.buscadorEditText)&#10;&#10;        centros = cargarCentrosDesdeJson()&#10;        adapter = CentroAdapter(centros) { centro -&gt;&#10;            moverMapaACentro(centro)&#10;            android.util.Log.d(&quot;EcoRutaApp&quot;, &quot;Enviando destino al Wear: ${centro.nombre} (${centro.lat}, ${centro.lng})&quot;)&#10;            LocationSender.enviarDestinoAlReloj(this, centro.lat, centro.lng, centro.nombre)&#10;            android.widget.Toast.makeText(this, &quot;Destino enviado: ${centro.nombre}&quot;, android.widget.Toast.LENGTH_SHORT).show()&#10;        }&#10;&#10;        recyclerView.layoutManager = LinearLayoutManager(this)&#10;        recyclerView.adapter = adapter&#10;&#10;        buscador.addTextChangedListener {&#10;            val filtro = it.toString().trim().lowercase()&#10;            val filtrados = centros.filter { c -&gt; c.materiales.lowercase().contains(filtro) }&#10;            adapter.actualizarLista(filtrados)&#10;        }&#10;    }&#10;&#10;    override fun onMapReady(googleMap: GoogleMap) {&#10;        map = googleMap&#10;&#10;        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {&#10;            ActivityCompat.requestPermissions(this, arrayOf(Manifest.permission.ACCESS_FINE_LOCATION), 1)&#10;            return&#10;        }&#10;&#10;        map.isMyLocationEnabled = true&#10;        val tepic = LatLng(21.5058, -104.8940)&#10;        map.moveCamera(CameraUpdateFactory.newLatLngZoom(tepic, 13f))&#10;&#10;        for (centro in centros) {&#10;            val posicion = LatLng(centro.lat, centro.lng)&#10;            map.addMarker(MarkerOptions().position(posicion).title(centro.nombre))&#10;        }&#10;    }&#10;&#10;    private fun moverMapaACentro(centro: CentroReciclaje) {&#10;        val posicion = LatLng(centro.lat, centro.lng)&#10;        map.animateCamera(CameraUpdateFactory.newLatLngZoom(posicion, 15f))&#10;    }&#10;&#10;    private fun cargarCentrosDesdeJson(): List&lt;CentroReciclaje&gt; {&#10;        val jsonString = assets.open(&quot;centros.json&quot;).bufferedReader().use { it.readText() }&#10;        val jsonArray = JSONArray(jsonString)&#10;        val centros = mutableListOf&lt;CentroReciclaje&gt;()&#10;        for (i in 0 until jsonArray.length()) {&#10;            val obj = jsonArray.getJSONObject(i)&#10;            centros.add(&#10;                CentroReciclaje(&#10;                    obj.getString(&quot;nombre&quot;),&#10;                    obj.getDouble(&quot;lat&quot;),&#10;                    obj.getDouble(&quot;lng&quot;),&#10;                    obj.getString(&quot;materiales&quot;)&#10;                )&#10;            )&#10;        }&#10;        return centros&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/ecorutaapp/HabitosMenuActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/ecorutaapp/HabitosMenuActivity.kt" />
              <option name="updatedContent" value="package com.example.ecorutaapp&#10;&#10;import android.os.Bundle&#10;import android.widget.Button&#10;import android.widget.CheckBox&#10;import android.widget.Toast&#10;import androidx.appcompat.app.AppCompatActivity&#10;&#10;class HabitosMenuActivity : AppCompatActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_habitos_menu)&#10;&#10;        findViewById&lt;Button&gt;(R.id.btn_guardar_habitos).setOnClickListener {&#10;            val reutilizar = findViewById&lt;CheckBox&gt;(R.id.cb_reutilizar).isChecked&#10;            val ahorrarAgua = findViewById&lt;CheckBox&gt;(R.id.cb_ahorrar_agua).isChecked&#10;            val separarResiduos = findViewById&lt;CheckBox&gt;(R.id.cb_separar_residuos).isChecked&#10;            Toast.makeText(this, &quot;¡Hábitos guardados!&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/ecorutaapp/MainMenuActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/ecorutaapp/MainMenuActivity.kt" />
              <option name="originalContent" value="package com.example.ecorutaapp&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.widget.Button&#10;import androidx.appcompat.app.AppCompatActivity&#10;&#10;class MainMenuActivity : AppCompatActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_main_menu)&#10;&#10;        findViewById&lt;Button&gt;(R.id.btn_habitos).setOnClickListener {&#10;            startActivity(Intent(this, HabitosEcologicosActivity::class.java))&#10;        }&#10;        findViewById&lt;Button&gt;(R.id.btn_education).setOnClickListener {&#10;            startActivity(Intent(this, EducacionAmbientalActivity::class.java))&#10;        }&#10;        findViewById&lt;Button&gt;(R.id.btn_centros).setOnClickListener {&#10;            startActivity(Intent(this, CentrosReciclajeActivity::class.java))&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.ecorutaapp&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.widget.Button&#10;import androidx.appcompat.app.AppCompatActivity&#10;&#10;class MainMenuActivity : AppCompatActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_main_menu)&#10;&#10;        findViewById&lt;Button&gt;(R.id.btn_habitos).setOnClickListener {&#10;            startActivity(Intent(this, HabitosEcologicosActivity::class.java))&#10;        }&#10;        findViewById&lt;Button&gt;(R.id.btn_education).setOnClickListener {&#10;            startActivity(Intent(this, EducacionAmbientalActivity::class.java))&#10;        }&#10;        findViewById&lt;Button&gt;(R.id.btn_centros).setOnClickListener {&#10;            startActivity(Intent(this, CentrosReciclajeActivity::class.java))&#10;        }&#10;        val btnSync = findViewById&lt;Button&gt;(R.id.btn_sync_watch)&#10;        btnSync.setOnClickListener {&#10;            // Mostrar Toast y cambiar estado visual&#10;            android.widget.Toast.makeText(this, &quot;Sincronizando...&quot;, android.widget.Toast.LENGTH_SHORT).show()&#10;            findViewById&lt;android.widget.TextView&gt;(R.id.txtSyncStatus).text = &quot;Sincronizando...&quot;&#10;            // Simulación de envío de sincronización al reloj&#10;            // Aquí deberías llamar a tu método real de sincronización&#10;            com.example.ecorutaapp.utils.LocationSender.enviarTestSincronizacion(this) { exito -&gt;&#10;                if (exito) {&#10;                    android.widget.Toast.makeText(this, &quot;¡Conectado!&quot;, android.widget.Toast.LENGTH_SHORT).show()&#10;                    findViewById&lt;android.widget.TextView&gt;(R.id.txtSyncStatus).text = &quot;Conectado&quot;&#10;                } else {&#10;                    android.widget.Toast.makeText(this, &quot;Error de conexión&quot;, android.widget.Toast.LENGTH_SHORT).show()&#10;                    findViewById&lt;android.widget.TextView&gt;(R.id.txtSyncStatus).text = &quot;Sin conexión&quot;&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/ecorutaapp/utils/LocationSender.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/ecorutaapp/utils/LocationSender.kt" />
              <option name="originalContent" value="package com.example.ecorutaapp.utils&#10;&#10;import android.content.Context&#10;import com.google.android.gms.wearable.PutDataMapRequest&#10;import com.google.android.gms.wearable.Wearable&#10;&#10;object LocationSender {&#10;    fun enviarDestinoAlReloj(context: Context, lat: Double, lng: Double, name: String) {&#10;        val dataMap = PutDataMapRequest.create(&quot;/destination&quot;).apply {&#10;            dataMap.putDouble(&quot;lat&quot;, lat)&#10;            dataMap.putDouble(&quot;lng&quot;, lng)&#10;            dataMap.putString(&quot;name&quot;, name)&#10;        }.asPutDataRequest().setUrgent()&#10;&#10;        Wearable.getDataClient(context).putDataItem(dataMap)&#10;    }&#10;&#10;    fun enviarDestinoEnTiempoReal(context: Context, lat: Double, lng: Double, name: String) {&#10;        // Enviar datos cada vez que cambie la ubicación o el destino&#10;        enviarDestinoAlReloj(context, lat, lng, name)&#10;    }&#10;&#10;    fun enviarTestSincronizacion(mainMenuActivity: MainMenuActivity, any: Any) {&#10;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.ecorutaapp.utils&#10;&#10;import android.content.Context&#10;import com.google.android.gms.wearable.PutDataMapRequest&#10;import com.google.android.gms.wearable.Wearable&#10;&#10;object LocationSender {&#10;    fun enviarDestinoAlReloj(context: Context, lat: Double, lng: Double, name: String) {&#10;        val dataMap = PutDataMapRequest.create(&quot;/destination&quot;).apply {&#10;            dataMap.putDouble(&quot;lat&quot;, lat)&#10;            dataMap.putDouble(&quot;lng&quot;, lng)&#10;            dataMap.putString(&quot;name&quot;, name)&#10;        }.asPutDataRequest().setUrgent()&#10;&#10;        Wearable.getDataClient(context).putDataItem(dataMap)&#10;    }&#10;&#10;    fun enviarDestinoEnTiempoReal(context: Context, lat: Double, lng: Double, name: String) {&#10;        // Enviar datos cada vez que cambie la ubicación o el destino&#10;        enviarDestinoAlReloj(context, lat, lng, name)&#10;    }&#10;&#10;    fun enviarTestSincronizacion(mainMenuActivity: MainMenuActivity, callback: (Boolean) -&gt; Unit) {&#10;        val dataMap = PutDataMapRequest.create(&quot;/test_sync&quot;).apply {&#10;            dataMap.putLong(&quot;timestamp&quot;, System.currentTimeMillis())&#10;        }.asPutDataRequest().setUrgent()&#10;&#10;        Wearable.getDataClient(mainMenuActivity).putDataItem(dataMap)&#10;            .addOnSuccessListener {&#10;                callback(true)&#10;            }&#10;            .addOnFailureListener {&#10;                callback(false)&#10;            }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_main_menu.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_main_menu.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:fillViewport=&quot;true&quot;&#10;    android:background=&quot;@android:color/background_light&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:orientation=&quot;vertical&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:padding=&quot;24dp&quot;&#10;        android:gravity=&quot;center_horizontal&quot;&gt;&#10;&#10;        &lt;!-- Espacio para imagen principal --&gt;&#10;        &lt;ImageView&#10;            android:id=&quot;@+id/imgMain&quot;&#10;            android:layout_width=&quot;200dp&quot;&#10;            android:layout_height=&quot;200dp&quot;&#10;            android:src=&quot;@drawable/ic_recycle_logo&quot;&#10;            android:contentDescription=&quot;Imagen principal&quot;&#10;            android:layout_marginBottom=&quot;24dp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            style=&quot;@style/EcoTitle&quot;&#10;            android:text=&quot;EcoRuta&quot; /&gt;&#10;&#10;        &lt;!-- Descripción de la app --&gt;&#10;&#10;        &lt;!-- Imagen decorativa inferior --&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txt_description&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;12dp&quot;&#10;            android:lineSpacingExtra=&quot;6dp&quot;&#10;            android:text=&quot;EcoRuta es una aplicación móvil diseñada para fomentar la cultura del reciclaje de forma interactiva, accesible y educativa. Aprovecha el GPS, la sincronización con Wear OS y pantallas inteligentes para facilitar la ubicación de centros de reciclaje, promover hábitos ecológicos y brindar educación ambiental.&quot;&#10;            android:textSize=&quot;16sp&quot; /&gt;&#10;&#10;        &lt;ImageView&#10;            android:id=&quot;@+id/img_banner&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;180dp&quot;&#10;            android:src=&quot;@drawable/ecoruta_banner&quot;&#10;            android:scaleType=&quot;centerCrop&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:contentDescription=&quot;Banner reciclaje&quot; /&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btn_habitos&quot;&#10;            style=&quot;@style/EcoButton&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Hábitos ecológicos&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btn_centros&quot;&#10;            style=&quot;@style/EcoButton&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Centros de reciclaje&quot; /&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btn_education&quot;&#10;            style=&quot;@style/EcoButton&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Educación ambiental&quot;&#10;            android:layout_marginTop=&quot;12dp&quot; /&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btn_sync_watch&quot;&#10;            style=&quot;@style/EcoButton&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Sincronizar con reloj&quot;&#10;            android:layout_marginTop=&quot;12dp&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/ScrollView&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:fillViewport=&quot;true&quot;&#10;    android:background=&quot;@android:color/background_light&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:orientation=&quot;vertical&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:padding=&quot;24dp&quot;&#10;        android:gravity=&quot;center_horizontal&quot;&gt;&#10;&#10;        &lt;!-- Espacio para imagen principal --&gt;&#10;        &lt;ImageView&#10;            android:id=&quot;@+id/imgMain&quot;&#10;            android:layout_width=&quot;200dp&quot;&#10;            android:layout_height=&quot;200dp&quot;&#10;            android:src=&quot;@drawable/ic_recycle_logo&quot;&#10;            android:contentDescription=&quot;Imagen principal&quot;&#10;            android:layout_marginBottom=&quot;24dp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            style=&quot;@style/EcoTitle&quot;&#10;            android:text=&quot;EcoRuta&quot; /&gt;&#10;&#10;        &lt;!-- Descripción de la app --&gt;&#10;&#10;        &lt;!-- Imagen decorativa inferior --&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txt_description&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;12dp&quot;&#10;            android:lineSpacingExtra=&quot;6dp&quot;&#10;            android:text=&quot;EcoRuta es una aplicación móvil diseñada para fomentar la cultura del reciclaje de forma interactiva, accesible y educativa. Aprovecha el GPS, la sincronización con Wear OS y pantallas inteligentes para facilitar la ubicación de centros de reciclaje, promover hábitos ecológicos y brindar educación ambiental.&quot;&#10;            android:textSize=&quot;16sp&quot; /&gt;&#10;&#10;        &lt;ImageView&#10;            android:id=&quot;@+id/img_banner&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;180dp&quot;&#10;            android:src=&quot;@drawable/ecoruta_banner&quot;&#10;            android:scaleType=&quot;centerCrop&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:contentDescription=&quot;Banner reciclaje&quot; /&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btn_habitos&quot;&#10;            style=&quot;@style/EcoButton&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Hábitos ecológicos&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btn_centros&quot;&#10;            style=&quot;@style/EcoButton&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Centros de reciclaje&quot; /&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btn_education&quot;&#10;            style=&quot;@style/EcoButton&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Educación ambiental&quot;&#10;            android:layout_marginTop=&quot;12dp&quot; /&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btn_sync_watch&quot;&#10;            style=&quot;@style/EcoButton&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Sincronizar con reloj&quot;&#10;            android:layout_marginTop=&quot;12dp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtSyncStatus&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Sin conexión&quot;&#10;            android:textColor=&quot;@color/textDark&quot;&#10;            android:textSize=&quot;15sp&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:layout_marginTop=&quot;8dp&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/ScrollView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/colors.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/colors.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;color name=&quot;white&quot;&gt;#FFFFFF&lt;/color&gt;&#10;    &lt;color name=&quot;black&quot;&gt;#000000&lt;/color&gt;&#10;    &lt;color name=&quot;purple_500&quot;&gt;#6200EE&lt;/color&gt;&#10;    &lt;color name=&quot;teal_200&quot;&gt;#03DAC5&lt;/color&gt;&#10;&lt;/resources&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;color name=&quot;white&quot;&gt;#FFFFFF&lt;/color&gt;&#10;    &lt;color name=&quot;black&quot;&gt;#000000&lt;/color&gt;&#10;    &lt;color name=&quot;purple_500&quot;&gt;#6200EE&lt;/color&gt;&#10;    &lt;color name=&quot;teal_200&quot;&gt;#03DAC5&lt;/color&gt;&#10;    &lt;color name=&quot;colorPrimary&quot;&gt;#4CAF50&lt;/color&gt; &lt;!-- Verde Eco --&gt;&#10;    &lt;color name=&quot;colorPrimaryDark&quot;&gt;#388E3C&lt;/color&gt;&#10;    &lt;color name=&quot;colorAccent&quot;&gt;#CDDC39&lt;/color&gt; &lt;!-- Lima --&gt;&#10;    &lt;color name=&quot;backgroundLight&quot;&gt;#F1F8E9&lt;/color&gt; &lt;!-- Verde muy claro --&gt;&#10;    &lt;color name=&quot;textDark&quot;&gt;#212121&lt;/color&gt;&#10;    &lt;color name=&quot;textLight&quot;&gt;#FFFFFF&lt;/color&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/styles.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/styles.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&lt;/resources&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;!-- Tema de la app --&gt;&#10;    &lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.AppCompat.Light.NoActionBar&quot;&gt;&#10;        &lt;item name=&quot;colorPrimary&quot;&gt;@color/colorPrimary&lt;/item&gt;&#10;        &lt;item name=&quot;colorPrimaryDark&quot;&gt;@color/colorPrimaryDark&lt;/item&gt;&#10;        &lt;item name=&quot;colorAccent&quot;&gt;@color/colorAccent&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowBackground&quot;&gt;@color/backgroundLight&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- Estilo para botones --&gt;&#10;    &lt;style name=&quot;EcoButton&quot;&gt;&#10;        &lt;item name=&quot;android:layout_width&quot;&gt;match_parent&lt;/item&gt;&#10;        &lt;item name=&quot;android:layout_height&quot;&gt;wrap_content&lt;/item&gt;&#10;        &lt;item name=&quot;android:backgroundTint&quot;&gt;@color/colorPrimary&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/textLight&lt;/item&gt;&#10;        &lt;item name=&quot;android:textSize&quot;&gt;16sp&lt;/item&gt;&#10;        &lt;item name=&quot;android:layout_marginTop&quot;&gt;12dp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- Estilo para títulos --&gt;&#10;    &lt;style name=&quot;EcoTitle&quot;&gt;&#10;        &lt;item name=&quot;android:textSize&quot;&gt;24sp&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/colorPrimaryDark&lt;/item&gt;&#10;        &lt;item name=&quot;android:textStyle&quot;&gt;bold&lt;/item&gt;&#10;        &lt;item name=&quot;android:layout_marginBottom&quot;&gt;24dp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/wear/src/main/java/com/example/wear/listeners/DataListener.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/wear/src/main/java/com/example/wear/listeners/DataListener.kt" />
              <option name="originalContent" value="package com.example.wear.listeners&#10;&#10;import android.util.Log&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.google.android.gms.wearable.*&#10;import com.example.wear.viewmodel.WearViewModel&#10;import kotlinx.coroutines.launch&#10;&#10;class DataListener(&#10;    private val viewModel: WearViewModel&#10;) : DataClient.OnDataChangedListener {&#10;&#10;    override fun onDataChanged(dataEvents: DataEventBuffer) {&#10;        dataEvents.forEach { event -&gt;&#10;            if (event.type == DataEvent.TYPE_CHANGED &amp;&amp;&#10;                event.dataItem.uri.path == &quot;/destination&quot;) {&#10;&#10;                val dataMap = DataMapItem.fromDataItem(event.dataItem).dataMap&#10;                val lat = dataMap.getDouble(&quot;lat&quot;)&#10;                val lng = dataMap.getDouble(&quot;lng&quot;)&#10;                val name = dataMap.getString(&quot;name&quot;) ?: &quot;&quot;&#10;&#10;                viewModel.setDestino(lat, lng, name)&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.wear.listeners&#10;&#10;import android.util.Log&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.google.android.gms.wearable.*&#10;import com.example.wear.viewmodel.WearViewModel&#10;import kotlinx.coroutines.launch&#10;&#10;class DataListener(&#10;    private val viewModel: WearViewModel&#10;) : DataClient.OnDataChangedListener {&#10;&#10;    override fun onDataChanged(dataEvents: DataEventBuffer) {&#10;        dataEvents.forEach { event -&gt;&#10;            if (event.type == DataEvent.TYPE_CHANGED &amp;&amp;&#10;                event.dataItem.uri.path == &quot;/destination&quot;) {&#10;&#10;                val dataMap = DataMapItem.fromDataItem(event.dataItem).dataMap&#10;                val lat = dataMap.getDouble(&quot;lat&quot;)&#10;                val lng = dataMap.getDouble(&quot;lng&quot;)&#10;                val name = dataMap.getString(&quot;name&quot;) ?: &quot;&quot;&#10;&#10;                Log.d(&quot;EcoRutaWear&quot;, &quot;Destino recibido: $name ($lat, $lng)&quot;)&#10;                viewModel.setDestino(lat, lng, name)&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/wear/src/main/java/com/example/wear/presentation/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/wear/src/main/java/com/example/wear/presentation/MainActivity.kt" />
              <option name="originalContent" value="package com.example.wear&#10;&#10;import android.Manifest&#10;import android.content.pm.PackageManager&#10;import android.location.Location&#10;import android.os.Bundle&#10;import android.os.Looper&#10;import android.widget.Button&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.activity.ComponentActivity&#10;import androidx.core.content.ContextCompat&#10;import androidx.lifecycle.Observer&#10;import androidx.lifecycle.ViewModelProvider&#10;import com.example.wear.listeners.DataListener&#10;import com.example.wear.sensors.CompassManager&#10;import com.example.wear.viewmodel.WearViewModel&#10;import com.google.android.gms.location.*&#10;import com.google.android.gms.wearable.MessageClient&#10;import com.google.android.gms.wearable.MessageEvent&#10;import com.google.android.gms.wearable.Wearable&#10;&#10;class MainActivity : ComponentActivity(), MessageClient.OnMessageReceivedListener {&#10;&#10;    private lateinit var listener: DataListener&#10;    private lateinit var compassManager: CompassManager&#10;    private lateinit var viewModel: WearViewModel&#10;    private var currentLocation: Location? = null&#10;    private lateinit var fusedLocationClient: FusedLocationProviderClient&#10;    private lateinit var locationCallback: LocationCallback&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_direction)&#10;&#10;        // Referencias de UI&#10;        val arrowImageView = findViewById&lt;ImageView&gt;(R.id.arrowImageView)&#10;        val destinationTextView = findViewById&lt;TextView&gt;(R.id.destinationTextView)&#10;        val txtStatus = findViewById&lt;TextView&gt;(R.id.txtStatus)&#10;        val btnTestConexion = findViewById&lt;Button&gt;(R.id.btnTestConexion)&#10;&#10;        // ViewModel y listener de datos&#10;        viewModel = ViewModelProvider(this)[WearViewModel::class.java]&#10;        listener = DataListener(viewModel)&#10;        Wearable.getDataClient(this).addListener(listener)&#10;&#10;        // Sensor de brújula&#10;        compassManager = CompassManager(this)&#10;        compassManager.start()&#10;&#10;        // Obtener ubicación actual&#10;        fusedLocationClient = LocationServices.getFusedLocationProviderClient(this)&#10;        locationCallback = object : LocationCallback() {&#10;            override fun onLocationResult(result: LocationResult) {&#10;                currentLocation = result.lastLocation&#10;                updateArrow(arrowImageView, destinationTextView)&#10;            }&#10;        }&#10;&#10;        if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION)&#10;            == PackageManager.PERMISSION_GRANTED&#10;        ) {&#10;            val request = LocationRequest.create().apply {&#10;                interval = 1000&#10;                fastestInterval = 500&#10;                priority = Priority.PRIORITY_HIGH_ACCURACY&#10;            }&#10;            fusedLocationClient.requestLocationUpdates(request, locationCallback, Looper.getMainLooper())&#10;        }&#10;&#10;        // Si no hay destino recibido, usar uno por defecto&#10;        if (viewModel.destinoLat.value == null || viewModel.destinoLng.value == null) {&#10;            // Ejemplo: Centro de reciclaje &quot;Centro 1&quot; (ajusta los valores según tus datos reales)&#10;            viewModel.setDestino(21.5058, -104.8940, &quot;Centro 1&quot;)&#10;        }&#10;&#10;        // Observa cambios en destino y azimuth&#10;        viewModel.destinoLat.observe(this, Observer { updateArrow(arrowImageView, destinationTextView) })&#10;        viewModel.destinoLng.observe(this, Observer { updateArrow(arrowImageView, destinationTextView) })&#10;        viewModel.destinoName.observe(this, Observer { updateArrow(arrowImageView, destinationTextView) })&#10;        compassManager.azimuth.observe(this, Observer { updateArrow(arrowImageView, destinationTextView) })&#10;&#10;        txtStatus.text = &quot;Sin conexión&quot;&#10;        txtStatus.setTextColor(getColor(android.R.color.holo_red_light))&#10;&#10;        // Actualiza el estado cuando se reciben datos&#10;        viewModel.destinoLat.observe(this, Observer {&#10;            txtStatus.text = &quot;Conectado&quot;&#10;            txtStatus.setTextColor(getColor(android.R.color.holo_green_light))&#10;        })&#10;        viewModel.destinoLng.observe(this, Observer {&#10;            txtStatus.text = &quot;Conectado&quot;&#10;            txtStatus.setTextColor(getColor(android.R.color.holo_green_light))&#10;        })&#10;        viewModel.destinoName.observe(this, Observer {&#10;            txtStatus.text = &quot;Conectado&quot;&#10;            txtStatus.setTextColor(getColor(android.R.color.holo_green_light))&#10;        })&#10;&#10;        btnTestConexion.setOnClickListener {&#10;            txtStatus.text = &quot;Probando...&quot;&#10;            txtStatus.setTextColor(getColor(android.R.color.holo_orange_light))&#10;            Wearable.getNodeClient(this).connectedNodes.addOnSuccessListener { nodes -&gt;&#10;                if (nodes.isNotEmpty()) {&#10;                    val nodeId = nodes[0].id&#10;                    Wearable.getMessageClient(this).sendMessage(&#10;                        nodeId,&#10;                        &quot;/test_conexion&quot;,&#10;                        &quot;ping&quot;.toByteArray()&#10;                    ).addOnSuccessListener {&#10;                        txtStatus.text = &quot;Test enviado&quot;&#10;                    }.addOnFailureListener {&#10;                        txtStatus.text = &quot;Error de conexión&quot;&#10;                        txtStatus.setTextColor(getColor(android.R.color.holo_red_light))&#10;                    }&#10;                } else {&#10;                    txtStatus.text = &quot;No se encontró el móvil&quot;&#10;                    txtStatus.setTextColor(getColor(android.R.color.holo_red_light))&#10;                }&#10;            }&#10;        }&#10;&#10;        Wearable.getMessageClient(this).addListener(this)&#10;    }&#10;&#10;    private fun updateArrow(arrowImageView: ImageView, destinationTextView: TextView) {&#10;        val lat = viewModel.destinoLat.value ?: return&#10;        val lng = viewModel.destinoLng.value ?: return&#10;        val name = viewModel.destinoName.value ?: &quot;&quot;&#10;        val azimuth = compassManager.azimuth.value ?: 0f&#10;&#10;        val destinoLocation = Location(&quot;&quot;).apply {&#10;            latitude = lat&#10;            longitude = lng&#10;        }&#10;&#10;        val bearing = currentLocation?.bearingTo(destinoLocation) ?: 0f&#10;        val arrowRotation = (bearing - azimuth + 360) % 360&#10;&#10;        arrowImageView.rotation = arrowRotation&#10;        destinationTextView.text = &quot;Ir a: $name&quot;&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        super.onDestroy()&#10;        Wearable.getDataClient(this).removeListener(listener)&#10;        compassManager.stop()&#10;        fusedLocationClient.removeLocationUpdates(locationCallback)&#10;        Wearable.getMessageClient(this).removeListener(this)&#10;    }&#10;&#10;    override fun onMessageReceived(event: MessageEvent) {&#10;        val txtStatus = findViewById&lt;TextView&gt;(R.id.txtStatus)&#10;        if (event.path == &quot;/test_conexion_respuesta&quot;) {&#10;            runOnUiThread {&#10;                txtStatus.text = &quot;¡Conexión exitosa!&quot;&#10;                txtStatus.setTextColor(getColor(android.R.color.holo_green_light))&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.wear&#10;&#10;import android.Manifest&#10;import android.content.pm.PackageManager&#10;import android.location.Location&#10;import android.os.Bundle&#10;import android.os.Looper&#10;import android.widget.Button&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.activity.ComponentActivity&#10;import androidx.core.content.ContextCompat&#10;import androidx.lifecycle.Observer&#10;import androidx.lifecycle.ViewModelProvider&#10;import com.example.wear.listeners.DataListener&#10;import com.example.wear.sensors.CompassManager&#10;import com.example.wear.viewmodel.WearViewModel&#10;import com.google.android.gms.location.*&#10;import com.google.android.gms.wearable.MessageClient&#10;import com.google.android.gms.wearable.MessageEvent&#10;import com.google.android.gms.wearable.Wearable&#10;&#10;class MainActivity : ComponentActivity(), MessageClient.OnMessageReceivedListener {&#10;&#10;    private lateinit var listener: DataListener&#10;    private lateinit var compassManager: CompassManager&#10;    private lateinit var viewModel: WearViewModel&#10;    private var currentLocation: Location? = null&#10;    private lateinit var fusedLocationClient: FusedLocationProviderClient&#10;    private lateinit var locationCallback: LocationCallback&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_direction)&#10;&#10;        // Referencias de UI&#10;        val arrowImageView = findViewById&lt;ImageView&gt;(R.id.arrowImageView)&#10;        val destinationTextView = findViewById&lt;TextView&gt;(R.id.destinationTextView)&#10;        val txtStatus = findViewById&lt;TextView&gt;(R.id.txtStatus)&#10;        val btnTestConexion = findViewById&lt;Button&gt;(R.id.btnTestConexion)&#10;&#10;        // ViewModel y listener de datos&#10;        viewModel = ViewModelProvider(this)[WearViewModel::class.java]&#10;        listener = DataListener(viewModel)&#10;        Wearable.getDataClient(this).addListener(listener)&#10;&#10;        // Sensor de brújula&#10;        compassManager = CompassManager(this)&#10;        compassManager.start()&#10;&#10;        // Obtener ubicación actual&#10;        fusedLocationClient = LocationServices.getFusedLocationProviderClient(this)&#10;        locationCallback = object : LocationCallback() {&#10;            override fun onLocationResult(result: LocationResult) {&#10;                currentLocation = result.lastLocation&#10;                updateArrow(arrowImageView, destinationTextView)&#10;            }&#10;        }&#10;&#10;        if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION)&#10;            == PackageManager.PERMISSION_GRANTED&#10;        ) {&#10;            val request = LocationRequest.create().apply {&#10;                interval = 1000&#10;                fastestInterval = 500&#10;                priority = Priority.PRIORITY_HIGH_ACCURACY&#10;            }&#10;            fusedLocationClient.requestLocationUpdates(request, locationCallback, Looper.getMainLooper())&#10;        }&#10;&#10;        // Si no hay destino recibido, usar uno por defecto&#10;        if (viewModel.destinoLat.value == null || viewModel.destinoLng.value == null) {&#10;            // Ejemplo: Centro de reciclaje &quot;Centro 1&quot; (ajusta los valores según tus datos reales)&#10;            viewModel.setDestino(21.5058, -104.8940, &quot;Centro 1&quot;)&#10;        }&#10;&#10;        // Observa cambios en destino y azimuth&#10;        viewModel.destinoLat.observe(this, Observer { updateArrow(arrowImageView, destinationTextView) })&#10;        viewModel.destinoLng.observe(this, Observer { updateArrow(arrowImageView, destinationTextView) })&#10;        viewModel.destinoName.observe(this, Observer { updateArrow(arrowImageView, destinationTextView) })&#10;        compassManager.azimuth.observe(this, Observer { updateArrow(arrowImageView, destinationTextView) })&#10;&#10;        // Observa el nombre del destino y actualiza el TextView&#10;        viewModel.destinoName.observe(this) { nombre -&gt;&#10;            findViewById&lt;TextView&gt;(R.id.destinationTextView).text = nombre&#10;        }&#10;&#10;        // Observa el estado de la conexión Bluetooth&#10;        val bluetoothAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter()&#10;        if (bluetoothAdapter != null &amp;&amp; bluetoothAdapter.isEnabled) {&#10;            txtStatus.text = &quot;Bluetooth activo&quot;&#10;            txtStatus.setTextColor(android.graphics.Color.GREEN)&#10;        } else {&#10;            txtStatus.text = &quot;Bluetooth apagado&quot;&#10;            txtStatus.setTextColor(android.graphics.Color.RED)&#10;        }&#10;&#10;        txtStatus.text = &quot;Sin conexión&quot;&#10;        txtStatus.setTextColor(getColor(android.R.color.holo_red_light))&#10;&#10;        // Actualiza el estado cuando se reciben datos&#10;        viewModel.destinoLat.observe(this, Observer {&#10;            txtStatus.text = &quot;Conectado&quot;&#10;            txtStatus.setTextColor(getColor(android.R.color.holo_green_light))&#10;        })&#10;        viewModel.destinoLng.observe(this, Observer {&#10;            txtStatus.text = &quot;Conectado&quot;&#10;            txtStatus.setTextColor(getColor(android.R.color.holo_green_light))&#10;        })&#10;        viewModel.destinoName.observe(this, Observer {&#10;            txtStatus.text = &quot;Conectado&quot;&#10;            txtStatus.setTextColor(getColor(android.R.color.holo_green_light))&#10;        })&#10;&#10;        btnTestConexion.setOnClickListener {&#10;            txtStatus.text = &quot;Probando...&quot;&#10;            txtStatus.setTextColor(getColor(android.R.color.holo_orange_light))&#10;            Wearable.getNodeClient(this).connectedNodes.addOnSuccessListener { nodes -&gt;&#10;                if (nodes.isNotEmpty()) {&#10;                    val nodeId = nodes[0].id&#10;                    Wearable.getMessageClient(this).sendMessage(&#10;                        nodeId,&#10;                        &quot;/test_conexion&quot;,&#10;                        &quot;ping&quot;.toByteArray()&#10;                    ).addOnSuccessListener {&#10;                        txtStatus.text = &quot;Test enviado&quot;&#10;                    }.addOnFailureListener {&#10;                        txtStatus.text = &quot;Error de conexión&quot;&#10;                        txtStatus.setTextColor(getColor(android.R.color.holo_red_light))&#10;                    }&#10;                } else {&#10;                    txtStatus.text = &quot;No se encontró el móvil&quot;&#10;                    txtStatus.setTextColor(getColor(android.R.color.holo_red_light))&#10;                }&#10;            }&#10;        }&#10;&#10;        Wearable.getMessageClient(this).addListener(this)&#10;    }&#10;&#10;    private fun updateArrow(arrowImageView: ImageView, destinationTextView: TextView) {&#10;        val lat = viewModel.destinoLat.value ?: return&#10;        val lng = viewModel.destinoLng.value ?: return&#10;        val name = viewModel.destinoName.value ?: &quot;&quot;&#10;        val azimuth = compassManager.azimuth.value ?: 0f&#10;&#10;        val destinoLocation = Location(&quot;&quot;).apply {&#10;            latitude = lat&#10;            longitude = lng&#10;        }&#10;&#10;        val bearing = currentLocation?.bearingTo(destinoLocation) ?: 0f&#10;        val arrowRotation = (bearing - azimuth + 360) % 360&#10;&#10;        arrowImageView.rotation = arrowRotation&#10;        destinationTextView.text = &quot;Ir a: $name&quot;&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        super.onDestroy()&#10;        Wearable.getDataClient(this).removeListener(listener)&#10;        compassManager.stop()&#10;        fusedLocationClient.removeLocationUpdates(locationCallback)&#10;        Wearable.getMessageClient(this).removeListener(this)&#10;    }&#10;&#10;    override fun onMessageReceived(event: MessageEvent) {&#10;        val txtStatus = findViewById&lt;TextView&gt;(R.id.txtStatus)&#10;        if (event.path == &quot;/test_conexion_respuesta&quot;) {&#10;            runOnUiThread {&#10;                txtStatus.text = &quot;¡Conexión exitosa!&quot;&#10;                txtStatus.setTextColor(getColor(android.R.color.holo_green_light))&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>